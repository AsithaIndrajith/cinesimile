{"version":3,"sources":["components/Home/index.js","components/Header/index.js","components/Footer/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","MainHeader","Header","aria-label","SkipToContent","HeaderName","href","prefix","HeaderNavigation","HeaderMenuItem","HeaderGlobalBar","HeaderGlobalAction","Footer","Routes","Content","exact","path","render","props","component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAaeA,EAXF,WACX,OACE,yBAAKC,UAAU,8CACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,kBACf,wBAAIA,UAAU,yBAAd,4B,gFC+BOC,EAtBI,kBACjB,kBAACC,EAAA,EAAD,CAAQC,aAAW,aAAaH,UAAU,UACxC,kBAACI,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYC,KAAK,IAAIC,OAAO,IAA5B,cAGA,kBAACC,EAAA,EAAD,CAAkBL,aAAW,cAC3B,kBAACM,EAAA,EAAD,CAAgBH,KAAK,KAArB,SAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAoBR,aAAW,iBAC7B,kBAAC,IAAD,OAEF,kBAACQ,EAAA,EAAD,CAAoBR,aAAW,eAC7B,kBAAC,IAAD,OAEF,kBAACQ,EAAA,EAAD,CAAoBR,aAAW,gBAC7B,kBAAC,IAAD,U,QCtBOS,G,MARA,kBACb,4BAAQZ,UAAU,UAChB,wBAAIA,UAAU,mBACZ,sCADF,eACiC,0BAAMA,UAAU,SAAhB,YCkBtBa,EAjBA,WACb,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAASd,UAAU,WACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAM,IAAKC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAASA,MACrD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAM,IAAKG,UAAWpB,OAIzC,kBAAC,EAAD,QCXSqB,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.762b66ff.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\"></div>\n        <h1 className=\"landing-page__heading\">Welcome to CineSimile</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from \"carbon-components-react\";\nimport {\n  AppSwitcher20,\n  Notification20,\n  UserAvatar20,\n} from \"@carbon/icons-react\";\n\nconst MainHeader = () => (\n  <Header aria-label=\"CineSimile\" className=\"header\">\n    <SkipToContent />\n    <HeaderName href=\"/\" prefix=\"\">\n      CineSimile\n    </HeaderName>\n    <HeaderNavigation aria-label=\"CineSimile\">\n      <HeaderMenuItem href=\"/\">Home</HeaderMenuItem>\n    </HeaderNavigation>\n    <HeaderGlobalBar>\n      <HeaderGlobalAction aria-label=\"Notifications\">\n        <Notification20 />\n      </HeaderGlobalAction>\n      <HeaderGlobalAction aria-label=\"User Avatar\">\n        <UserAvatar20 />\n      </HeaderGlobalAction>\n      <HeaderGlobalAction aria-label=\"App Switcher\">\n        <AppSwitcher20 />\n      </HeaderGlobalAction>\n    </HeaderGlobalBar>\n  </Header>\n);\nexport default MainHeader;\n","import React from \"react\";\nimport \"./index.scss\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <h5 className=\"footer__heading\">\n      <span>&copy;</span> CineSimile <span className=\"years\">2020</span>\n    </h5>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport MainHeader from \"./components/Header\";\nimport { Content } from \"carbon-components-react\";\nimport Footer from \"./components/Footer\";\n\nconst Routes = () => {\n  return (\n    <>\n      <MainHeader />\n      <Content className=\"content\">\n        <Router>\n          <Switch>\n            <Route exact path={\"/\"} render={(props) => <Home {...props} />} />\n            <Route exact path={\"*\"} component={Home} />\n          </Switch>\n        </Router>\n      </Content>\n      <Footer />\n    </>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./routes\";\nimport \"./app.scss\";\n\nconst App = () => {\n  return <Routes />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}